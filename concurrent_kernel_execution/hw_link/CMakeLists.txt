# Generated by Vitis, modify at only sections marked as USER SETTINGS
set(_CONTAINER_NAMES
matrix_ops
)


####    START OF THE USER SETTINGS    ####
# Below settings can be customized
# Adding any other command line options to be passed to v++ --link
set(USER_CONTAINER_LINKER_OPTIONS
""
)
####    Add any binary container specific linker options.    ####
set(USER_matrix_ops_OPTIONS
""
)
####    END OF USER SETTINGS SECTION    ####
####    CAUTION in updating below section    ####


# These setting are required to build the application as per the project
# template used. Update below only to modify the default settings.
# Below linker options are derived from the application template used to create
# this project. Update them to suite your requirement. They will not be modified
# further by the tool. If linker options are needed, they can be added to
# USER_CONTAINER_LINKER_OPTIONS listed above.
set(_CONTAINER_LINKER_OPTIONS
""
)


# Below build data files list is derived from the application template used to
# create this project. This will not be modified further by the tool.
set(_LINK_BUILD_DATAFILES
""
)


# Below linker options are derived from the application template used to create
# this project. Update them to suite your requirement. They will not be modified
# further by the tool. If new container specific linker options are needed, they
# can be added to USER_<binary container name>_OPTIONS listed above.
set(_matrix_ops_OPTIONS
""
)


# Below variables will be auto-updated based on kernels added/removed from the
# binary container.
set(_matrix_ops_KERNEL_PATHS
pl_kernels/madd
pl_kernels/mscale
pl_kernels/mmult
)
set(_matrix_ops_KERNEL_XO_PATHS
pl_kernels/madd.xo
pl_kernels/mscale.xo
pl_kernels/mmult.xo
)
set(_matrix_ops_USER_KERNEL_PATHS
""
)
set(_matrix_ops_USER_KERNEL_XO_PATHS
""
)
set(_matrix_ops_CFG
hw_link/matrix_ops-link.cfg
)
set(_HW_LINK_PROJ
hw_link
)


# AIE libadf.a library will be added to HW Linker if project has AIE component.
set(_AIE_LIB_ADF
""
)

##  End of variables auto-updated by the tool ##

foreach( datafile ${_LINK_BUILD_DATAFILES})
    file(COPY ${datafile} DESTINATION .)
endforeach()

foreach(CONTAINER ${_CONTAINER_NAMES})

	set(_KERNEL_XO ${_${CONTAINER}_KERNEL_XO_PATHS})
	list(TRANSFORM _KERNEL_XO PREPEND "${CMAKE_BINARY_DIR}/")

	set(_USER_KERNEL_XO ${_${CONTAINER}_USER_KERNEL_XO_PATHS})
	list(TRANSFORM _USER_KERNEL_XO PREPEND "${CMAKE_SOURCE_DIR}/")

	set(_XCLBIN  ${CONTAINER}.xclbin)

	set(_KERNEL_TARGETS ${_${CONTAINER}_KERNEL_PATHS})
	list(TRANSFORM _KERNEL_TARGETS REPLACE "/" "_")
	list(TRANSFORM _KERNEL_TARGETS APPEND "_CompileXO")

	if (NOT ${_AIE_LIB_ADF} STREQUAL "")
	   set(_AIE_TARGETS ${_AIE_LIB_ADF})
	   list(TRANSFORM _AIE_TARGETS REPLACE "/" "_")
	   list(TRANSFORM _AIE_LIB_ADF PREPEND "${CMAKE_BINARY_DIR}/")
	endif()

	set(_CONTAINER_CFG ${_${CONTAINER}_CFG})
	list(TRANSFORM _CONTAINER_CFG PREPEND "${CMAKE_SOURCE_DIR}/")

	set(CONFIG_OPTIONS "")
	foreach( cfg ${_CONTAINER_CFG})
	    list(APPEND CONFIG_OPTIONS "--config")
	    list(APPEND CONFIG_OPTIONS ${cfg})
	endforeach()

	ADD_CUSTOM_COMMAND(OUTPUT ${_XCLBIN}
	    BYPRODUCTS ${CMAKE_BINARY_DIR}/${_HW_LINK_PROJ}/${_XCLBIN}.link_summary
        ${CMAKE_BINARY_DIR}/${_HW_LINK_PROJ}/${_XCLBIN}.info
        ${CMAKE_BINARY_DIR}/${_HW_LINK_PROJ}/${CONTAINER} .Xil xrc.log xcd.log
	  COMMAND ${Vitis_COMPILER}
			--platform ${VITIS_PLATFORM_PATH}
			--target ${VITIS_TARGET} --link ${_KERNEL_XO} ${_USER_KERNEL_XO}
			${CONFIG_OPTIONS}
			${USER_CONTAINER_LINKER_OPTIONS}
			${_CONTAINER_LINKER_OPTIONS}
			${USER_${CONTAINER}_OPTIONS}  ${_AIE_LIB_ADF}
			-o ${_XCLBIN}
	  DEPENDS ${_CONTAINER_CFG}
	)
	ADD_CUSTOM_TARGET(VppLink_${CONTAINER} ALL
	   DEPENDS ${_XCLBIN} ${_KERNEL_TARGETS} ${_AIE_TARGETS} ${_LINK_BUILD_DATAFILES}
	)


endforeach()
